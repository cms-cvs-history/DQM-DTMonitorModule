process PROD = {
    include "Geometry/DTGeometry/data/dtGeometry.cfi"
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi" 
    include "CondCore/DBCommon/data/CondDBSetup.cfi"

    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cff" 
    include "Geometry/CommonDetUnit/data/globalTrackingGeometry.cfi"
    include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"

    #Event data source
    source = PoolSource {
	untracked vstring fileNames = {
'/store/data/2008/5/6/T0PromptReco-GlobalCruzet1-A-v1/0000/0007D9AB-C91B-DD11-83D9-001D09F28F11.root',
'/store/data/2008/5/6/T0PromptReco-GlobalCruzet1-A-v1/0000/A0FFBE18-D41B-DD11-B6E2-001D09F2527B.root'
	}
	untracked uint32 debugVebosity = 10
	untracked bool   debugFlag     = true

    }


    untracked PSet maxEvents = {untracked int32 input = 10000}

    #unpacker
    module dtunpacker = DTUnpackingModule {
    string dataType = "DDU"
    untracked bool fedbyType = true
    untracked bool useStandardFEDid = true
    PSet readOutParameters  = {
	untracked bool localDAQ = false
	untracked bool performDataIntegrityMonitor = false
	untracked bool debug = false
	PSet rosParameters = {
	    untracked bool localDAQ = false
	    untracked bool readingDDU = true  
	    untracked bool writeSC = true
	    untracked bool readDDUIDfromDDU = true
	    untracked bool performDataIntegrityMonitor = false
	    untracked bool debug = false
	}
    }
}

    include "DQMServices/Core/data/DQM.cfg"
   replace DQM.collectorHost = ""


    es_source DTMapping = PoolDBESSource {
	string timetype = "runnumber"    
	string connect = "oracle://cms_orcoff_prod/CMS_COND_20X_DT"
#        string connect = "frontier://Frontier/CMS_COND_ON_20X_DT"

	untracked bool siteLocalConfig = false
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	
	VPSet toGet = {
	    { string record = "DTReadOutMappingRcd"
		string tag = "map_GRUMM_maskFix" },
	    { string record = "DTT0Rcd"
		string tag = "t0_CRUZET_hlt" }, 
            { string record = "DTStatusFlagRcd"
		string tag = "noise_CRUZET_hlt"}
	}
    }


   # The ttrig from DB
    es_source TTrig = PoolDBESSource { 
	string connect = "sqlite_file:/afs/cern.ch/cms/CAF/CMSALCA/ALCA_MUONCALIB/DTCALIB/CRUZET/ttrig/ttrig_second_43352.db"
	string timetype = "runnumber"   
	untracked uint32 authenticationMethod = 0
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	VPSet toGet = {{
		string record = "DTTtrigRcd" 
		string tag = "ttrig"}}
    }




   module eventInfoProvider = EventCoordinatesSource {
       untracked string eventInfoFolder = "EventInfo/"
    }
    
    # The module for 1D DT RecHit building
    include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.hitResolution = 0.05
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.tTrigModeConfig.kFactor = -1.00	

    ## _Vdrift2D_ ##
    include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.segmCleanerMode = 2
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.MaxAllowedHits = 30

    ## _4DAlgo ##
    include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco4DAlgo_LinearDrift_CosmicData.Reco4DAlgoConfig.segmCleanerMode = 2



    
     service = MessageLogger {
        untracked vstring destinations = { "cout" }
        untracked vstring debugModules = { "resolutionTest_step1", "resolutionTest_step2", "resolutionTest_step3" }
        untracked vstring categories = { "resolution" }
        untracked PSet cout = {
            untracked string threshold = "ERROR"
            untracked PSet default = { untracked int32 limit = 0 }
            untracked PSet FwkJob  = { untracked int32 limit = 0 }
            untracked bool noLineBreaks = true
            untracked PSet resolution = {untracked int32 limit = 10000000}
        }
    } 


    module DTkFactValidation = DTCalibValidation {
	# Switch on/off the verbosity
        untracked bool debug = false
        # Lable to retrieve RecHits from the event
        untracked string recHits1DLabel = 'dt1DRecHits'
        # Lable to retrieve 2D segments from the event
        untracked string segment2DLabel = 'dt2DSegments'
        # Lable to retrieve 4D segments from the event
        untracked string segment4DLabel = 'dt4DSegments'
        # Write the histos on file
        bool OutputMEsInRootFile = true
        string OutputFileName="residuals.root"
   }


   module qTester = QualityTester{
     untracked int32 prescaleFactor = 1
     untracked FileInPath qtList = "DQM/DTMonitorClient/test/QualityTests.xml" 
   }

 
   module resolutionTest_step1 = DTResolutionTest{
      	untracked bool debug = false
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP1"
	untracked string histoTag = "hResDist_STEP1"
        untracked string histoTag2D = "hResDistVsDist_STEP1"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }

   
   module resolutionTest_step2 = DTResolutionTest{
      	untracked bool debug = false
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP2"
	untracked string histoTag = "hResDist_STEP2"
        untracked string histoTag2D = "hResDistVsDist_STEP2"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }
   

    module resolutionTest_step3 = DTResolutionTest{
      	untracked bool debug = false
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP3"
	untracked string histoTag = "hResDist_STEP3"
        untracked string histoTag2D = "hResDistVsDist_STEP3"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }

   # first run the source
   sequence firstStep = {dtunpacker,dt1DRecHits, dt2DSegments, dt4DSegments, DTkFactValidation}
   # than run the client
   sequence secondStep = {resolutionTest_step1, resolutionTest_step2, resolutionTest_step3, qTester}

   path p = {firstStep}

}

