process PROD = {

    include "CondCore/DBCommon/data/CondDBSetup.cfi"

    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cff" 
    include "Geometry/CommonDetUnit/data/globalTrackingGeometry.cfi"
    include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"

   #Event data source
   source = PoolSource {
	untracked vstring fileNames = {
            '/store/relval/2008/3/31/RelVal-RelValH200ZZ4L-1206891598-HLT/0000/0E6AC599-40FF-DC11-9CDE-0018F3D0968E.root',
            '/store/relval/2008/3/31/RelVal-RelValH200ZZ4L-1206891598-HLT/0000/182C2F06-3AFF-DC11-A8FE-001A928116C6.root',
            '/store/relval/2008/3/31/RelVal-RelValH200ZZ4L-1206891598-HLT/0000/1EE47C3F-40FF-DC11-A7EE-001731AF6877.root'
         }
	untracked uint32 debugVebosity = 10
	untracked bool   debugFlag     = true
   }

    untracked PSet maxEvents = {untracked int32 input = 400}


    include "DQMServices/Core/data/DQM.cfg"
   replace DQM.collectorHost = ""

      es_source DTMapping = PoolDBESSource {
       string timetype = "runnumber"
       string connect = "frontier://FrontierProd/CMS_COND_20X_DT"

	untracked bool siteLocalConfig = false
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	VPSet toGet = {
	    { string record = "DTT0Rcd"
              string tag = "t0Fake_20X_Sept15_mc" }
	}
   }

   # The ttrig from DB
   es_source TTrig = PoolDBESSource { 
	using CondDBSetup
	string connect = "sqlite_file:/tmp/giorgia/ttrig.db" 
	string timetype = "runnumber"    
	untracked uint32 authenticationMethod = 0
	VPSet toGet = {{
		string record = "DTTtrigRcd" 
		string tag = "ttrig"}}
   }




   module eventInfoProvider = EventCoordinatesSource {
       untracked string eventInfoFolder = "EventInfo/"
    }

   include "RecoLocalMuon/Configuration/data/RecoLocalMuon.cff"

    
     service = MessageLogger {
        untracked vstring destinations = { "cout" }
        untracked vstring debugModules = { "*" }
        untracked PSet cout = {
            untracked string threshold = "DEBUG"
            untracked bool noLineBreaks = true
            untracked PSet DEBUG = {untracked int32 limit = 0 }
        }
    } 


    module DTkFactValidation = DTCalibValidation {
	# Switch on/off the verbosity
        untracked bool debug = true
        # Lable to retrieve RecHits from the event
        untracked string recHits1DLabel = 'dt1DRecHits'
        # Lable to retrieve 2D segments from the event
        untracked string segment2DLabel = 'dt2DSegments'
        # Lable to retrieve 4D segments from the event
        untracked string segment4DLabel = 'dt4DSegments'
        # Write the histos on file
        bool OutputMEsInRootFile = true
        string OutputFileName="/tmp/giorgia/DTkFactorValidation.root"
   }


   module qTester = QualityTester{
     untracked int32 prescaleFactor = 1
     untracked FileInPath qtList = "DQM/DTMonitorClient/test/QualityTests.xml" 
   }

 
   module resolutionTest_step1 = DTResolutionTest{
      	untracked bool debug = true
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP1"
	untracked string histoTag = "hResDist_STEP1"
        untracked string histoTag2D = "hResDistVsDist_STEP1"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }

   
   module resolutionTest_step2 = DTResolutionTest{
      	untracked bool debug = true
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP2"
	untracked string histoTag = "hResDist_STEP2"
        untracked string histoTag2D = "hResDistVsDist_STEP2"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }
   

    module resolutionTest_step3 = DTResolutionTest{
      	untracked bool debug = true
        untracked bool calibModule = true
        untracked string folderRoot = ""
        untracked string STEP = "STEP3"
	untracked string histoTag = "hResDist_STEP3"
        untracked string histoTag2D = "hResDistVsDist_STEP3"

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1
    }




   path p = {dtlocalreco_with_2DSegments, DTkFactValidation, resolutionTest_step1, resolutionTest_step2, resolutionTest_step3, qTester}

}

