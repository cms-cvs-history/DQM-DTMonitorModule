process PROD = {

    include "CondCore/DBCommon/data/CondDBSetup.cfi"

    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cff" 
    include "Geometry/CommonDetUnit/data/globalTrackingGeometry.cfi"
    include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"
  source = NewEventStreamFileReader {
   untracked vstring fileNames = {   

"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0008.A.storageManager.0.0000.dat"
#"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0008.A.storageManager.0.0001.dat",
#"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0009.A.storageManager.0.0000.dat",
#"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0009.A.storageManager.0.0001.dat",
#"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0010.A.storageManager.0.0000.dat",
#"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/038/281/GlobalMar08.00038281.0010.A.storageManager.0.0001.dat"


	}}

   
#    source = DaqSource{ 
#        untracked string readerPluginName = "DTDDUFileReader"
#        untracked PSet readerPset = {
#	    untracked string fileName ="/tmp/maselli/DT_W1All_TechTrig_S3S5S6S8S9S12_vmepcs2g18-16_r34817.i0"
#	    untracked bool isRaw = true
#	    untracked int32 numberOfHeaderWords = 10
#        }
#    }

    untracked PSet maxEvents = {untracked int32 input = -1}

    service = DaqMonitorROOTBackEnd{ }

    #unpacker
    module dtunpacker = DTUnpackingModule{
       string dataType = "DDU"
       untracked bool fedbyType = true
       untracked bool useStandardFEDid = true
       PSet readOutParameters  = {
          untracked bool localDAQ = false
          untracked bool performDataIntegrityMonitor = false
          untracked bool debug = false
          PSet rosParameters = {
            untracked bool localDAQ = false
            untracked bool readingDDU = true
            untracked bool writeSC = true
            untracked bool readDDUIDfromDDU = true
            untracked bool performDataIntegrityMonitor = false
            untracked bool debug = false
            }
        }
    }


       es_source DTMapping = PoolDBESSource {
        string timetype = "runnumber"
#	string connect = "oracle://orcon/CMS_COND_ON_18X_DT"
#	string connect = "oracle://cms_orcoff/CMS_COND_ON_18X_DT"
        string connect = "frontier://Frontier/CMS_COND_ON_18X_DT"

	untracked bool siteLocalConfig = false
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	VPSet toGet = {
	    { string record = "DTReadOutMappingRcd"
               string tag = "map_GRUMM_maskFix" },
	    { string record = "DTT0Rcd"
		string tag = "t0_GRUMM" }, 
            { string record = "DTTtrigRcd"
               string tag = "tTrig_GRUMM_37919corr" }
	}
    }



         # DQM Online File saver module
    #### PUT THIS MODULE INTO YOUR PATH FOR OPERATION AT P5
    module dqmSaver = DQMFileSaver {
        # subsystem name (appears in filename)
        # default is: filename is taken from SourceName
        #             (toplevel of me-dir-tree) fixme
        untracked string fileName = "SubsystemName"
	# environment flag (default: "Online")
	//# FIXME should be implemented in dbe::save first
        untracked string environment = "Online"
        # Save file every N lumi sections (-1: disabled)
        untracked int32 prescaleLS = -1
        # Save file every N events (-1: disabled)
        untracked int32 prescaleEvt = -1
        # Save file every N minutes (-1: disabled)
        untracked int32 prescaleTime = -1
        # Save at end of run, runnumber in filename (default: true)
        untracked bool saveAtRunEnd = true
        # Save at end of job, no runnumber in filename (default: false)
        untracked bool saveAtJobEnd = true
    }

    
    # include "DQMServices/Examples/test/dqm_monitorDaemon.cfi"
    service = MonitorDaemon{
       # if true, will automatically start DQM thread in background
       # (default: false)
       untracked bool AutoInstantiate = true
       untracked string DestinationAddress = "localhost"
       untracked int32 SendPort = 9090
       #untracked int32 UpdateDelay = 5000
       #untracked string NameAsSource = "FU0"
    } 


    service = DQMShipMonitoring{
     #  // event-period for shipping monitoring to collector (default: 25)
     untracked uint32 period = 500
    }


    # The module for 1D DT RecHit building
    include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.hitResolution = 0.05
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.tTrigModeConfig.kFactor = -1.00	

    ## _Vdrift2D_ ##
    include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.segmCleanerMode = 2
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.MaxAllowedHits = 30

    ## _4DAlgo ##
    include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco4DAlgo_LinearDrift_CosmicData.Reco4DAlgoConfig.segmCleanerMode = 2


    service = MessageLogger {
        untracked vstring destinations = { "cout" }
        untracked vstring debugModules = { "*" }
        untracked vstring categories = { "globalTrack"}
        untracked PSet cout = {
            untracked string threshold = "DEBUG"
            untracked bool noLineBreaks = true
            untracked PSet DEBUG = {untracked int32 limit = 0 }
            untracked PSet globalTrack = {untracked int32 limit = 10000000}
        }
    } 


    module DTkFactValidation = DTCalibValidation {
	# Switch on/off the verbosity
        untracked bool debug = true
        # Lable to retrieve RecHits from the event
        untracked string recHits1DLabel = 'dt1DRecHits'
        # Lable to retrieve 2D segments from the event
        untracked string segment2DLabel = 'dt2DSegments'
        # Lable to retrieve 4D segments from the event
        untracked string segment4DLabel = 'dt4DSegments'
        # Write the histos on file
        bool OutputMEsInRootFile = true
        string OutputFileName="/tmp/giorgia/DTkFactorValidation_GRUMM_38281_5.root"
   }


   path p = {dtunpacker,dt1DRecHits, dt2DSegments, dt4DSegments, DTkFactValidation}

}

