process MONITOR = {    

    include "CondCore/DBCommon/data/CondDBSetup.cfi"
    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"


    source = DaqSource{ string reader = "DTDDUFileReader"
    untracked int32 maxEvents = 3000
    PSet pset = {
      string fileName ="/tmp/giorgia/Wm1S08_default_20mV_r1606.i0"
      untracked bool isRaw = true
      untracked int32 eventsAnalysisRate = 1
      untracked int32 numberOfHeaderWords = 10

   }
}





    #unpacker
    module dtunpacker = DTUnpackingModule{
       string dataType = "DDU"	
       untracked bool writeSC = true
       untracked bool debugMode = false
       untracked bool readingDDU = true
       untracked bool readDDUIDfromDDU = false	
       untracked bool isRaw = false
       untracked bool globalDAQ = false
       untracked int32 dduID = 730
       untracked bool performDataIntegrityMonitor = true
    }


   #mapping
    es_source roMapping = PoolDBESSource {
       using CondDBSetup
       string connect =  "sqlite_file:database/mapSec8.db"
       untracked string catalog = "file:database/mapCatalog.xml"
       string timetype = "runnumber"
       untracked uint32 authenticationMethod = 0
       VPSet toGet = {{
            string record = "DTReadOutMappingRcd"
            string tag = "channelsMap"
       }}
    }


    #noise
    es_source noiseMapping = PoolDBESSource {
       using CondDBSetup
       string connect =  "sqlite_file:database/noise_Sec8.db"
       untracked string catalog = "file:database/catalog.xml"
       string timetype = "runnumber"
       untracked uint32 authenticationMethod = 0
       VPSet toGet = {{
             string record = "DTStatusFlagRcd"
             string tag = "noise"
             }}
    }



    #tTrig
    es_source tTrigMapping = PoolDBESSource {
       using CondDBSetup
       string connect =  "sqlite_file:database/tTrig_Sec8.db"
       untracked string catalog = "file:database/catalog.xml"
       string timetype = "runnumber"
       untracked uint32 authenticationMethod = 0
       VPSet toGet = {{
              string record = "DTTtrigRcd"
              string tag = "tTrig"
          }}
    }


    #tzero
    es_source t0 = PoolDBESSource {
       using CondDBSetup
       VPSet toGet = {
           {string record = "DTT0Rcd"
            string tag = "tzero_13_03_07"
       }   }
       bool loadAll = true
       string connect = "sqlite_file:database/t0.db"
       untracked string catalog = "file:database/catalog.xml"
       string timetype = "runnumber"
    }


    module eventInfoProvider = EventCoordinatesSource {
       untracked string eventInfoFolder = "EventInfo/"
    }

  
    service = DaqMonitorROOTBackEnd{ }


    service = MonitorDaemon{
       # if true, will automatically start DQM thread in background
       # (default: false)
       untracked bool AutoInstantiate = true
       untracked string DestinationAddress = "localhost"
       untracked int32 SendPort = 9090
       untracked int32 UpdateDelay = 5000
       untracked string NameAsSource = "FU0"
    } 


    service = DQMShipMonitoring{
       // event-period for shipping monitoring to collector (default: 25)
       untracked uint32 period = 500
    }


    # The module for 1D DT RecHit building
    include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.hitResolution = 0.05
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.tTrigModeConfig.kFactor = -1.00

    ## _Vdrift2D_ ##
    include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.segmCleanerMode = 2
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.MaxAllowedHits = 30


    ## _4DAlgo ##
    include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco4DAlgo_LinearDrift_CosmicData.Reco4DAlgoConfig.segmCleanerMode = 2



    service = MessageLogger {
       untracked vstring destinations = { "cout" }
       untracked vstring debugModules = { "*" }
       untracked PSet cout = {
          untracked string threshold = "WARNING"
          untracked bool noLineBreaks = true
          untracked PSet WARNING = {untracked int32 limit = 0 }
       }
    }


    service = DTDataIntegrityTask{
       untracked bool debug = false
       untracked int32 timeBoxLowerBound = 0
       untracked int32 timeBoxUpperBound = 10000
       untracked string outputFile = "DataIntegrity.root"
       untracked int32 saveResultsFrequency = 1000
       untracked bool writeHisto = true
    }



    # DT Digi DQM
    module digiMonitor = DTDigiTask{
       untracked bool debug = true
    untracked string outputFile = "DigiMonitor.root"
    untracked bool readDB = true
    untracked bool localrun = true
    int32 defaultTtrig = 2700
    int32 defaultTmax = 500
    bool performPerWireT0Calibration = true
    untracked int32 tdcRescale = 1
    untracked int32 timeBoxGranularity = 4
    int32 inTimeHitsLowerBound = 500
    int32 inTimeHitsUpperBound = 500
    untracked bool checkNoisyChannels = true
    untracked bool writeHisto = true
}


     module testPulsesMonitor = DTTestPulsesTask {
	untracked int32 t0sRangeLowerBound = 10
	untracked int32 t0sRangeUpperBound = 10000
	untracked bool readDB = false
     }

 
        module triggerMonitor = DTLocalTriggerTask {
            untracked bool debug = true
            untracked string outputFile = "DTLocalTriggerSources.root"
            untracked string dcc_label = "dttpgprod"
            untracked string ros_label = "dtunpacker"
            untracked string seg_label = "dt4DSegments"
            untracked bool process_dcc = false
            untracked bool process_seg = true
            untracked bool process_ros = true
            untracked bool localrun = true
            untracked bool writeHisto = true
       }


    module dtSegmentAnalysisMonitor = DTSegmentAnalysisTask {
         untracked bool debug = true
         untracked string rootFileName = "DTSegmentAnalysis.root"
         untracked bool writeHisto = true
         string recHits4DLabel = "dt4DSegments"
         untracked bool localrun = true
         untracked bool MTCC = true
         untracked bool checkNoisyChannels = true
    }



    module dtResolutionAnalysisMonitor = DTResolutionAnalysisTask {
        untracked bool debug = true
        untracked string rootFileName = "DTResolutionAnalysisTask.root"
        untracked bool writeHisto = true
        string recHits4DLabel = "dt4DSegments"
        string recHitLabel = "dt1DRecHits"
        untracked bool MTCC = true
    }


   module dtEfficiencyMonitor = DTEfficiencyTask {
        untracked bool debug = true
        untracked string rootFileName = "DTEfficiencyTask.root"
        untracked bool writeHisto = true
        string recHits4DLabel = "dt4DSegments"
        string recHitLabel = "dt1DRecHits"
   }


	module dtChamberEfficiencyMonitor = DTChamberEfficiencyTask {
        untracked bool debug = true
        untracked string rootFileName = "DTChamberEfficiencyTask.root"
        untracked bool writeHisto = true
        string recHits4DLabel = "dt4DSegments"
        int32 minHitsSegment = 5
        double minChi2NormSegment = 20.
        double minCloseDist = 20.
    }

 
    module qTester = QualityTester {}

    module tTrigCalibrationTest = DTtTrigCalibrationTest{
       #Names of the quality test: it must match those specified in "qtList"
       untracked string folderRoot = ""
       untracked string tTrigTestName = "tTrigOffSet"
       untracked string histoTag = "TimeBox"
       untracked bool runningStandalone = true
       untracked int32 diagnosticPrescale = 1000
       untracked bool writeHisto = false
    }
	

    module resolutionTest = DTResolutionTest{
      	untracked bool debug = true
	untracked string outputFile = "DTResolutionTest.root"
	untracked bool writeHisto = true
        untracked string folderRoot = ""
	untracked string histoTag = "hResDist"	

        #Names of the quality tests: they must match those specified in "qtList"
	untracked string resDistributionTestName = "ResidualsDistributionGaussianTest"
	untracked string meanTestName = "ResidualsMeanInRange"
	untracked string sigmaTestName = "ResidualsSigmaInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1000
    }


    module efficiencyTest = DTEfficiencyTest{
	untracked bool debug = true
	untracked string outputFile = "DTEfficiencyTest.root"
        untracked bool writeHisto = true	
        untracked string folderRoot = ""

	#Names of the quality tests: they must match those specified in "qtList"
	untracked string EfficiencyTestName = "EfficiencyInRange"
	untracked string UnassEfficiencyTestName = "UnassEfficiencyInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1000
    }


    module chamberEfficiencyTest = DTChamberEfficiencyTest{
	untracked bool debug = true
	untracked string outputFile = "DTChamberEfficiencyTest.root"
        untracked bool writeHisto = true
        untracked string folderRoot = ""	
	#Names of the quality tests: they must match those specified in "qtList"
	untracked string XEfficiencyTestName = "ChEfficiencyInRangeX"
	untracked string YEfficiencyTestName = "ChEfficiencyInRangeY"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1000
    }


     module dataIntegrityTest = DTDataIntegrityTest{
	untracked bool debug = true
	untracked int32 saveResultsFrequency = 5 //number of updates
        untracked string folderRoot = ""
 	untracked string outputFile = "DataIntegrityTest.root"
	untracked bool writeHisto = true	
   	untracked int32 nTimeBin = 9
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 100
     }


     module deadChannelTest = DTDeadChannelTest{
	untracked bool debug = true
	untracked string outputFile = "DTDeadChannelTest.root"
        untracked bool writeHisto = true	
        untracked string folderRoot = ""
	#Names of the quality tests: they must match those specified in "qtList"
	untracked string EfficiencyTestName = "OccupancyDiffInRange"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1000
    }
	
     module noiseTest = DTNoiseTest {
        untracked bool debug = true
        untracked bool writeHisto = false	
        untracked int32 HzThreshold = 300
        untracked string meanTestName = "NoiseMeanInRange"
        untracked string folderRoot = ""
        untracked string folderTag = "Occupancies"
        untracked bool runningStandalone = true
        untracked int32 diagnosticPrescale = 1000

    }

    module triggerTest = DTLocalTriggerTest{
       untracked bool runningStandalone = true
       untracked int32 diagnosticPrescale = 1000
       untracked bool dataFromDDU = true
       untracked string outputFile = "DTLocalTriggerTest.root"
       untracked int32 resultSavingRate = 10
       untracked string folderRoot = ""
       untracked bool writeHisto = false
   }
	

   module summaryHistos = DTCreateSummaryHistos {
       #Name of the ROOT file which contains the time boxes
       untracked string rootFileName = "DTEfficiencyTest.root"
       #Name of the *.ps file which will contains the summary histos 	
       untracked string PsFileName = "DTSummaryHistos"
       #Histos to write in the summary file
       untracked bool DataIntegrityHistos = true
       untracked bool DigiHistos = true	
       untracked bool RecoHistos = true
       untracked bool ResoHistos = true
       untracked bool EfficiencyHistos = true
       untracked bool TestPulsesHistos = true
       untracked bool TriggerHistos = true
       #The DDU Id
       untracked int32 DDUId = 770	
    }

	

    sequence sources = {eventInfoProvider & dtunpacker & digiMonitor & dt1DRecHits & dt2DSegments & dt4DSegments & testPulsesMonitor & triggerMonitor & dtSegmentAnalysisMonitor & dtResolutionAnalysisMonitor & dtEfficiencyMonitor & dtChamberEfficiencyMonitor}

	
sequence clients = {qTester & dataIntegrityTest & tTrigCalibrationTest & resolutionTest & efficiencyTest & chamberEfficiencyTest & noiseTest & triggerTest}


path p = {sources, clients, summaryHistos}

}
