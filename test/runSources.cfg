process MONITOR = {    

    es_source mapping = PoolDBESSource { VPSet toGet = {
	    {string record = "DTReadOutMappingRcd"
		string tag = "MTCCMap"}
	}
	bool loadAll = true
	string connect = "sqlite_file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCMap.db"
	untracked string catalog = "file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCCatalog.xml"
	string timetype = "runnumber"
	PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        }
    }
    
    es_source Noise = PoolDBESSource { VPSet toGet = {
	    {string record = "DTStatusFlagRcd"
		string tag = "noise"}
	}
	bool loadAll = true
	string connect = "sqlite_file:database/noisyChannels.db"
	untracked string catalog = "file:database/noise.xml"
	string timetype = "runnumber"
	PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        }
    }
    
    
    #Geometry
    include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
    include "Geometry/DTGeometry/data/dtGeometry.cfi"
    
    source = PoolSource{
	
	untracked vstring fileNames = {
	    'file:/data/MTCC/GlobalRuns/mtcc.00003811.A.testStorageManager_0.0.root'
	}  
	untracked int32 maxEvents = -1
	untracked uint32 skipEvents = 0
	untracked uint32 debugVebosity = 10
	untracked bool   debugFlag     = true
    }
    
    
    # Data Unpacker
    module dtunpacker = DTUnpackingModule{ 
	string dataType = "DDU" 
	untracked bool debugMode = false 
	untracked bool readingDDU = true 
	untracked bool isRaw = false 
	untracked bool globalDAQ = true
	untracked int32 dduID = 770
	untracked bool performDataIntegrityMonitor = false 
    }
    
    
    es_source ttrig = PoolDBESSource {  
	VPSet toGet = {
	    {
		string record = "DTTtrigRcd" 
		string tag = "tTrig"
	    }
	} 
	bool loadAll = true
	string connect = "sqlite_file:database/tTrig3811.db"
	untracked string catalog = "file:database/tTrig.xml"
	string timetype = "runnumber" 
	PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        }
    }


    es_source t0 = PoolDBESSource {  VPSet toGet = {
	    {string record = "DTT0Rcd"
		string tag = "t0MTCC"
	    } }
	bool loadAll = true
	string connect = "sqlite_file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/t0MTCC.db"
	untracked string catalog = "file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCCatalog.xml"
	string timetype = "runnumber"
	PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        }
    }
    
    
    # DT Digi DQM
    module dtDigiMonitor = DTDigiTask{
	untracked bool debug = true
	untracked string outputFile = "DigiMonitor.root"
	untracked bool MTCC = false
	untracked bool preCalibrationJob = true 
	untracked bool readDB = false
	untracked bool localrun = true
	int32 defaultTtrig = 2700
	int32 defaultTmax = 500
	bool performPerWireT0Calibration = false
	untracked int32 tdcRescale = 1
	untracked int32 timeBoxGranularity = 4
	int32 inTimeHitsLowerBound = 500
	int32 inTimeHitsUpperBound = 500
	untracked bool checkNoisyChannels=false
	untracked bool writeHisto = true
    }
    
#     service = DTDataIntegrityTask{
# 	untracked bool debug = true	
# 	untracked int32 timeBoxLowerBound = 0
# 	untracked int32 timeBoxUpperBound = 10000
# 	untracked string outputFile = "/MTCC/results/currentRun/DataIntegrity.root"
# 	untracked int32 saveResultsFrequency = 60000
# 	untracked bool writeHisto = true
#     }

    
    service = DaqMonitorROOTBackEnd{ }
    
    service = MonitorDaemon{
	# if true, will automatically start DQM thread in background
	# (default: false)
	untracked bool AutoInstantiate = true
	untracked string DestinationAddress = "localhost"
	untracked int32 SendPort = 9090
	untracked int32 UpdateDelay = 5000
	untracked string NameAsSource = "FU0"
    }
 
    service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	untracked uint32 period = 1000
    }

    service = MessageLogger {
	untracked vstring destinations = { "cout" }
	untracked vstring debugModules = { "*" }
	untracked PSet cout = {
	    untracked string threshold = "WARNING"
	    untracked bool noLineBreaks = true
	    untracked PSet WARNING = {untracked int32 limit = 0 }
	}
    } 

    
    path p = {dtunpacker,dtDigiMonitor}

	
}


