process MONITOR = {    

	include "CondCore/DBCommon/data/CondDBSetup.cfi"

	#mapping 
	es_source mapping = PoolDBESSource {  
    	using CondDBSetup
    	string connect =  "sqlite_file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCMap.db"
    	untracked string catalog = "file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCCatalog.xml"
    	string timetype = "runnumber"    
    	untracked uint32 authenticationMethod = 0
    	VPSet toGet = {{
		string record = "DTReadOutMappingRcd"
	    	string tag = "MTCCMap"
		}}
	}
	

	#noise
	es_source Noise = PoolDBESSource { VPSet toGet = {
            {string record = "DTStatusFlagRcd"
                string tag = "noise"}
        }
        bool loadAll = true
        string connect = "sqlite_file:database/noisyChannels.db"
        untracked string catalog = "file:database/noise.xml"
        string timetype = "runnumber"
        PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        	}
    	}	

        	
	
	#Geometry
	include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
	include "Geometry/DTGeometry/data/dtGeometry.cfi"

	

	# Data Unpacker
    	module dtunpacker = DTUnpackingModule{ 
	string dataType = "DDU" 
	untracked bool debugMode = false 
	untracked bool readingDDU = true 
	untracked bool isRaw = false 
	untracked bool globalDAQ = true
	untracked int32 dduID = 770
	untracked bool performDataIntegrityMonitor = false 
    	}


	source = PoolSource{

        untracked vstring fileNames = {
            'file:/tmp/giorgia/mtcc.00003811.A.testStorageManager_0.0.root'
        }
        untracked int32 maxEvents = 10000
        untracked uint32 skipEvents = 0
        untracked uint32 debugVebosity = 10
        untracked bool   debugFlag     = true
	#replace PoolSource.maxEvents = -1	
	#replace dtunpacker.debugMode =  false
	#replace dtunpacker.performDataIntegrityMonitor = true
    	}	


	
	#ttrig
	es_source ttrig = PoolDBESSource {
        VPSet toGet = {
            {
                string record = "DTTtrigRcd"
                string tag = "tTrig"
            }
        }
        bool loadAll = true
        string connect = "sqlite_file:database/tTrig3811.db"
        untracked string catalog = "file:database/tTrig.xml"
        string timetype = "runnumber"
        PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
        	}
    	}	



	#tzero
	es_source t0 = PoolDBESSource {  VPSet toGet = {
            {string record = "DTT0Rcd"
                string tag = "t0MTCC"
            } }
        bool loadAll = true
        string connect = "sqlite_file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/t0MTCC.db"
        untracked string catalog = "file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/SQLLite_090/MTCCCatalog.xml"
        string timetype = "runnumber"
        PSet DBParameters = {
            untracked string authenticationPath="."
            untracked int32 messageLevel=0
     	   	}
    	}

	
        # DT Digi DQM
        module dtDigiMonitor = DTDigiTask{
                untracked bool debug = true
	        untracked string outputFile = "DigiMonitor.root"
       		untracked bool MTCC = true
                untracked bool preCalibrationJob = false
                untracked bool readDB = true
             	untracked bool localrun = false
	        int32 defaultTtrig = 2700
                int32 defaultTmax = 500
                bool performPerWireT0Calibration = true
                untracked int32 tdcRescale = 1
                untracked int32 timeBoxGranularity = 4
                int32 inTimeHitsLowerBound = 500
                int32 inTimeHitsUpperBound = 500
		untracked bool checkNoisyChannels=true
             	untracked bool writeHisto = true
        }

	service = DTDataIntegrityTask{
                untracked bool debug = true	
                untracked int32 timeBoxLowerBound = 0
                untracked int32 timeBoxUpperBound = 10000
		untracked string outputFile = "DataIntegrity.root"
		untracked int32 saveResultsFrequency = 60000
              	untracked bool writeHisto = true
        }


    # The module for 1D DT RecHit building
    include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.hitResolution = 0.05
    replace DTLinearDriftAlgo_CosmicData.recAlgoConfig.tTrigModeConfig.kFactor = -1.00

    ## _Vdrift2D_ ##
    include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.segmCleanerMode = 2
    replace DTCombinatorialPatternReco2DAlgo_LinearDrift_CosmicData.Reco2DAlgoConfig.MaxAllowedHits = 30


    ## _4DAlgo ##
    include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"
    replace DTCombinatorialPatternReco4DAlgo_LinearDrift_CosmicData.Reco4DAlgoConfig.segmCleanerMode = 2
    
    # DT Digi DQM
    module dtSegmentAnalysisMonitor = DTSegmentAnalysisTask {
	untracked bool debug = true
	untracked string rootFileName = "DTSegmentAnalysisTask.root"
	untracked bool writeHisto = true
	string recHits4DLabel = "dt4DSegments"
       	untracked bool localrun = false
	untracked bool MTCC = true
        untracked bool checkNoisyChannels=true
    }

		
    module dtResolutionAnalysisMonitor = DTResolutionAnalysisTask {   
	untracked bool debug = true
	untracked string rootFileName = "DTResolutionAnalysisTask.root"
	untracked bool writeHisto = true
	string recHits4DLabel = "dt4DSegments"
	string recHitLabel = "dt1DRecHits"
       	untracked bool MTCC = true
   }


    module dtTriggerMonitor = DTTriggerCheck {	
	untracked bool debug = truee
	untracked string outputFile = "DTTriggerTask.root"
	untracked bool localrun = false
	untracked bool writeHisto = true
    } 


	 service = DaqMonitorROOTBackEnd{ }
        	
        service = MonitorDaemon{
          # if true, will automatically start DQM thread in background
          # (default: false)
          untracked bool AutoInstantiate = true
        
          # if >=0, upon a connection problem, the source will automatically 
          # attempt to reconnect with a time delay (secs) specified here 
          # (default: 5)
          untracked int32 reconnect_delay = 5
        
          # collector hostname
          # (default: localhost)
          untracked string DestinationAddress = "localhost"
        
          # port for communicating with collector
          # (default: 9090)
          untracked int32 SendPort = 9090
        
          # monitoring period in ms (i.e. how often monitoring elements 
          # are shipped to the collector
          # (default: 1000)
          untracked int32 UpdateDelay = 1000
        
          # name of DQM source
          # (default: DQMSource)
          untracked string NameAsSource = "FU0"
        }

	include "MessageLogger.cfi"
	

#     	 path p = {dtunpacker,dt1DRecHits, dt2DSegments, dt4DSegments,dtLocalRecoMonitor,dtDigiMonitor,dtTriggerMonitor}
       path p = {dtunpacker,dt1DRecHits,dt2DSegments,dt4DSegments,dtSegmentAnalysisMonitor,dtResolutionAnalysisMonitor,dtDigiMonitor,dtTriggerMonitor}
	
}


